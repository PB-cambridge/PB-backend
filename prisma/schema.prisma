generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Admin {
  id        String   @default(cuid())
  email     String   @unique
  password  String
  photo     String?
  createdAt DateTime
  updatedAt DateTime
}

model Announcements {
  id        Int      @id @default(autoincrement())
  content   String
  date      DateTime
  createdAt DateTime
  updatedAt DateTime
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Event {
  id          String   @unique @default(cuid())
  title       String
  // registrationFee Int
  description String
  bannerImage String
  location    String
  dateTime    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model School {
  id       String          @id @default(uuid())
  name     String
  results  StudentResult[]
  students Student[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model StudentResult {
  id           String   @unique @default(cuid())
  studentRegNo String   @unique
  schoolId     String
  reading      Int?     @default(0)
  writing      Int?     @default(0)
  mathematics  Int?     @default(0)
  total        Int?     @default(0)
  position     Int?     @default(0)
  school       School   @relation(fields: [schoolId], references: [id])
  student      Student  @relation(fields: [studentRegNo], references: [regNo])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Student {
  id                      String         @unique @default(cuid())
  firstName               String
  lastName                String
  email                   String?
  address                 String
  phoneNumber             String?
  schoolId                String
  level                   String
  scienceOrArt            String
  passport                String
  whatsappNumber          String?
  regNo                   String         @unique
  acknowledgementSent     Boolean        @default(false)
  registeredCompetition   Competition    @relation(fields: [registeredCompetitionId], references: [id])
  registeredCompetitionId String
  result                  StudentResult?
  school                  School         @relation(fields: [schoolId], references: [id])
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

model Competition {
  id                 String    @unique @default(cuid())
  name               String    @unique
  registeredStudents Student[]
  registrationFee    Int
  date               DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}
