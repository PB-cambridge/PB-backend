generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Admin {
  id        String   @default(cuid())
  email     String   @unique
  password  String
  photo     String?
  createdAt DateTime
  updatedAt DateTime
}

model Announcements {
  id        Int      @id @default(autoincrement())
  content   String
  date      DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Event {
  id          String   @unique @default(cuid())
  title       String
  description String
  bannerImage String
  location    String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model School {
  id          String          @id @default(cuid())
  name        String
  competition Competition[]
  results     StudentResult[]
  students    Student[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model StudentResult {
  id            String      @unique @default(cuid())
  reading       Int?        @default(0)
  writing       Int?        @default(0)
  mathematics   Int?        @default(0)
  total         Int?        @default(0)
  position      String?
  school        School      @relation(fields: [schoolId], references: [id])
  schoolId      String
  student       Student     @relation(fields: [studentRegNo], references: [regNo])
  studentRegNo  String      @unique
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Student {
  id                       String         @unique @default(cuid())
  firstName                String
  lastName                 String
  email                    String?
  address                  String
  phoneNumber              String?
  schoolId                 String
  level                    String
  scienceOrArt             String
  hasInternationalPassport Boolean
  passport                 String
  whatsappNumber           String?
  regNo                    String         @unique
  acknowledgementSent      Boolean        @default(false)
  competition              Competition    @relation(fields: [competitionId], references: [id])
  competitionId            String
  result                   StudentResult?
  school                   School         @relation(fields: [schoolId], references: [id])
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
}

model Competition {
  id             String          @id @default(cuid())
  name           String          @unique
  students       Student[]
  results        StudentResult[]
  schools        School[]
  seniorRegFee   Int
  juniorRegFee   Int
  graduateRegFee Int
  active         Boolean         @default(true)
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Payments {
  id            String @id @default(cuid())
  amount        Int
  paystackRef   String
  studentData   String
  competitionId String
}
